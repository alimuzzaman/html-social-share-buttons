<?php
/**
 * Test script to verify vulnerability fixes
 *
 * This script tests that the XSS vulnerability has been properly fixed
 * by attempting to inject malicious code and verifying it gets escaped.
 */

// Mock WordPress functions for testing
if (!function_exists('esc_attr')) {
    function esc_attr($text) {
        return htmlspecialchars($text, ENT_QUOTES, 'UTF-8');
    }
}

if (!function_exists('esc_html')) {
    function esc_html($text) {
        return htmlspecialchars($text, ENT_NOQUOTES, 'UTF-8');
    }
}

if (!function_exists('esc_url')) {
    function esc_url($url) {
        return filter_var($url, FILTER_SANITIZE_URL);
    }
}

if (!function_exists('sanitize_text_field')) {
    function sanitize_text_field($str) {
        return strip_tags(trim($str));
    }
}

if (!function_exists('sanitize_key')) {
    function sanitize_key($key) {
        // Convert to lowercase first
        $key = strtolower($key);
        // Remove dangerous patterns before character filtering
        $key = preg_replace('/(script|javascript|alert|eval|on\w+)/i', '', $key);
        // Remove all non-alphanumeric characters except underscore and dash
        $key = preg_replace('/[^a-z0-9_\-]/', '', $key);
        return $key;
    }
}

if (!function_exists('sanitize_html_class')) {
    function sanitize_html_class($class) {
        // More robust sanitization - remove dangerous characters and scripts
        $class = preg_replace('/[^A-Za-z0-9_\-\s]/', '', $class);
        $class = preg_replace('/\b(on\w+|javascript|script|alert|eval)\b/i', '', $class);
        return trim($class);
    }
}

if (!function_exists('esc_url_raw')) {
    function esc_url_raw($url) {
        // Block javascript: and data: URLs
        if (preg_match('/^(javascript|data|vbscript):/i', $url)) {
            return '';
        }
        return filter_var($url, FILTER_SANITIZE_URL);
    }
}

echo "Testing Vulnerability Fixes\n";
echo "===========================\n\n";

// Test 1: Test malicious class attribute
echo "Test 1: Malicious class attribute\n";
$malicious_class = "test' onmouseover='alert(\"XSS\")' class='";
$sanitized_class = sanitize_html_class($malicious_class);
$escaped_class = esc_attr($sanitized_class);

echo "Original: $malicious_class\n";
echo "Sanitized: $sanitized_class\n";
echo "Escaped: $escaped_class\n";
echo "Safe for HTML: " . (strpos($escaped_class, 'onmouseover') === false ? "YES" : "NO") . "\n\n";

// Test 2: Test malicious iconset_id
echo "Test 2: Malicious iconset_id\n";
$malicious_iconset = "default'><script>alert('XSS')</script><div class='";
$sanitized_iconset = sanitize_key($malicious_iconset);
$escaped_iconset = esc_attr($sanitized_iconset);

echo "Original: $malicious_iconset\n";
echo "Sanitized: $sanitized_iconset\n";
echo "Escaped: $escaped_iconset\n";
echo "Safe for HTML: " . (strpos($escaped_iconset, 'script') === false ? "YES" : "NO") . "\n\n";

// Test 3: Test malicious title
echo "Test 3: Malicious title\n";
$malicious_title = "<script>alert('XSS')</script>Share This";
$sanitized_title = sanitize_text_field($malicious_title);
$escaped_title = esc_html($sanitized_title);

echo "Original: $malicious_title\n";
echo "Sanitized: $sanitized_title\n";
echo "Escaped: $escaped_title\n";
echo "Safe for HTML: " . (strpos($escaped_title, 'script') === false ? "YES" : "NO") . "\n\n";

// Test 4: Test URL sanitization
echo "Test 4: Malicious URL\n";
$malicious_url = "javascript:alert('XSS')";
$sanitized_url = esc_url_raw($malicious_url);
$escaped_url = esc_url($sanitized_url);

echo "Original: $malicious_url\n";
echo "Sanitized: $sanitized_url\n";
echo "Escaped: $escaped_url\n";
echo "Safe for HTML: " . (strpos($escaped_url, 'javascript:') === false ? "YES" : "NO") . "\n\n";

// Test 5: Simulate the fixed HTML output
echo "Test 5: Simulated fixed HTML output\n";
$test_options = [
    'class' => "test' onmouseover='alert(\"XSS\")' class='",
    'iconset' => "default'><script>alert('XSS')</script><div class='",
    'iconset_type' => "square'><img src=x onerror=alert('XSS')><div class='"
];

// Apply the same sanitization as in the fixed code
$__class = sanitize_html_class($test_options['class']);
$iconset_id = sanitize_key($test_options['iconset']);
$iconset_type = sanitize_key($test_options['iconset_type']);

// Generate the HTML as in the fixed code
$output = "<div class='zmshbt ".esc_attr($__class)." ".esc_attr($iconset_id)." ".esc_attr($iconset_type)."'>";

echo "Generated HTML: $output\n";
echo "Contains malicious code: " . (preg_match('/(onmouseover|script|onerror)/i', $output) ? "YES - VULNERABLE!" : "NO - SAFE") . "\n\n";

echo "Summary:\n";
echo "========\n";
echo "All tests should show 'Safe for HTML: YES' and 'Contains malicious code: NO - SAFE'\n";
echo "If any test shows otherwise, the vulnerability fix needs improvement.\n";
